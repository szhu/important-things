#!/usr/bin/env python

import re, sys, os

findpattern = re.compile('(\d\d\d\d)[^\d]?(\d\d)[^\d]?(\d\d)[^\d]?(\d\d)[^\d]?(\d\d)[^\d]?(\d\d)')
replacepatterns = {
	'-db': lambda m: '%s-%s-%s %s.%s.%s' % (m.group(1),m.group(2),m.group(3),m.group(4),m.group(5),m.group(6)),
	'-ph': lambda m: '%s%s%s_%s%s%s' % (m.group(1),m.group(2),m.group(3),m.group(4),m.group(5),m.group(6)),
}
modes = replacepatterns.keys()

def printUsage():
	commandName = os.path.split(sys.argv[0])[1]
	print 'usage: %s %s file ...' % (commandName, ' | '.join(modes))
	return 1

def processFiles(pathsOld):
	for pathOld in pathsOld:
		folder, nameOld = os.path.split(pathOld)
		baseOld, ext = os.path.splitext(nameOld)
		# print folder, nameOld, baseOld, ext
		baseNew = re.sub(findpattern, replacepattern, baseOld)
		#print baseNew
		nameNew = baseNew + ext
		pathNew = os.path.join(folder, nameNew)
		yield pathOld, pathNew, nameNew, pathOld != pathNew

def doRename(mode):
	global replacepattern
	replacepattern = replacepatterns[mode]

	args = sys.argv[2:]
	# print args

	itemsToRename = 0
	for pathOld, pathNew, nameNew, shouldRename in processFiles(args):
		if shouldRename:
			print pathOld, '->', nameNew
			itemsToRename += 1
		else: print pathOld, 'not renamed'

	try:
		text = raw_input('Press Enter to rename %s items... ' % itemsToRename)
		if text: return 1
	except KeyboardInterrupt: print; return 1

	print '- Renaming: -'
	for pathOld, pathNew, nameNew, shouldRename in processFiles(args):
		if shouldRename:
			print pathOld, '->', nameNew
			os.rename(pathOld, pathNew)

	return 0

def main():
	if len(sys.argv) > 2: 
		mode = sys.argv[1]
		if mode not in modes: return printUsage()
		else: return doRename(mode)
	else: return printUsage()

if __name__ == '__main__': sys.exit(main())