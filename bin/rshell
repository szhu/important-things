#!/usr/bin/env python

from sys import stdin, stdout, stderr

class Jail(object):
    def __init__(self, commands_dir):
        from os.path import abspath
        self.commands_dir = abspath(commands_dir)

    def command_path(self, command):
        from os.path import join
        return join(self.commands_dir, command)

    def allowed_command(self, command):
        from os.path import exists
        if '/' in command or command in ('.', '..'):
            return False
        return exists(self.command_path(command))

    def run_command(self, command, args):
        from subprocess import call
        if self.allowed_command(command):
            return call([self.command_path(command)] + args, stdin=stdin, stdout=stdout, stderr=stderr, bufsize=0)
        else:
            print >> stderr, "Error: unknown command %s" % command
            return 127

    def do_cd(self, args):
        from os import chdir
        if len(args) == 0:
            return 0
        try:
            chdir(args[0])
            return 0
        except Exception, e:
            print >> stderr, 'Error:', e
            return 1
        

def main(commands_dir):
    from shlex import split
    jail = Jail(commands_dir)
    last_code = 0
    while True:
        last_line = stdin.readline()
        if last_line == '': break
        args = split(last_line)
        if len(args) == 0: continue
        command = args.pop(0)
        if command == 'cd':
            last_code = jail.do_cd(args)
        elif command == 'exit':
            return last_code
        else:
            if command in ('and', "&&"):
                if last_code != 0 or len(args) == 0: continue
                command = args.pop(0)
            last_code = jail.run_command(command, args)


if __name__ == '__main__':
    from sys import argv
    try: exit(main(*argv[1:]))
    except Exception, e: print >> stderr, 'Error:', e
    except KeyboardInterrupt: print; pass
